Most common anti-forensic techniques? (then pick 1 or 2 to emulate w/ rootkit w/e.)
Most common anti-forensic detection techniques? (pick 1 or 2, compare against above anti-techniques.)
Can we identify improvements that can be made with regard to what we choose (from above 2 questions.)


Deliverable/Presentation:
 - In our proposal we said we'd write software to implement some of the hiding techniques.  we need to start this asap
 - In our proposal we said we'd choose two of the most common AF technniques.  we need to choose 2
 	- DeNISTing
 	- ADD or Log Corruption (i'd say ADD for cool, Log Corup. for fast)
 - In our proposal we said we'd "complete a study".  we need to design this
 	- Build rootkit that DeNISTS a small windows machine.  Compare FTK/EnCase vs the FS w/o tampering & w/ tampering.
 		- Determine the amount of time/money wasted (?)


What we have now:
- Information on general AF.
- Several techniques we think are common (citation needed...): DeNisting, LogCorruption, fake mem objecT?
- LKM that hides, impliments Denisting (via sheel script, or "scrambler"), impliments log corruption (or add?)
- How do these techniques affect something like the amount of files carved given the image after x seconds of our AF:
- DeNist for 10,30,120s, compare size of carved files
- Log Corruption




***Primary gaol of all anti-forensics to increase the amount of time & money required to "deal" with the infection, uncover authors, clean machine.


Focus(?):
 - Binary dynamic/static evasion: debug/sandbox detection, packing/encrypted.
 - General enviormental techniques for foiling forensic analysis: De-NISTing, Log Corruption, data saturation.


"Anti-Forensic" Tools available in Metasploit:
*https://community.rapid7.com/thread/1141
**Tools removed, and new ones don't seem to have been written (at least included in new MSF)
Timestomp - modify NTFS (access,create,modify,entry-mod) timestamps
Slacker - tool to hide data in NFTS slack-space
Sam Juicer - tool to dump user password hashes in windows w/o modifying system


Personal:
Can you manipulate Win Event logs?
SUPER timeline (from sans)


/* LIT & RESOURCES */
// Videos
Video Source: DefCon 20 - Anti-Forensics, and Anti-Anti-Forensics
https://www.youtube.com/watch?v=1PEOCAxR5Hk
Anti Forensics techniques:
1. Data Saturation - keep overwhelming amounts of media/data to slow/burden/cost the analysts.
 - Mitigation: Parallelizing acquisition, use the suspects own hardware to perform acquisition.
2. Non Standard RAID (drive order, block size/endianess, *use porn to fix RAID defcon 17 video)
 - Mitigation: De-RAID array on suspect's hardware/setup, image the volume instead of the drives.
3. File-Signature Masking
 - Fuzzy Hashing, editors opening strange formats (eg. a dll opened in wordpad)
4. De-Nisting (changing benign files so they don't match NIST hash dictionary)
 - Intelligent searching of the data, look for DEP off
5. Scrambled MACE(ACME) timestamps (timestomp, etc), disbale lastAccessUpdate, randomizing BIOS time
 - Infer from sequential time, relative time
 - If ACME values modified selectively, very difficult to prove tampering
6. Use of Restricted Filenames
 - Never export native file names, instead use auto-generated ID of some kind
7. Circular References - Confound recursive walks, either crash/waste lots of time
 - Image analysis easily defeats this (access outside the media's FS)
8. Log Breaking/Corrupting - Confound automated log parsing (use strange ASCII, quotes, shell special chars, delims, windows event rec magic bytes, etc.)
 - Do we need to parse whole log?  Custom parsing...
9. Use of Lotus Notes (IBM software) - Uses convoluted engineered encryption/decryption
 - Investigate using the application itself - learn the system.
10. Hash Collisions - modify badfile.dat to match goodfile.dat's hash, use this to confuse/incept reasonable doubt in legal persons
 - Use good hashes (sha256 etc), use another verification method along w/ hashing
11. Use of dummy media/storage - make it look like it was used, fool investigators into not looking for the "real" media (remote, usbkey, etc.)
 - Check for tricky USB storage locations (mobo headers), "weird" storage like eSATA, etc.

Video Source: Sick Anti Forensics Mechanisms in the Wild
https://www.youtube.com/watch?v=adJ_QZxW7Ck
Software:
1. Metasploit Scripts - watch for forensic-related processes and kills
2. Shadow Walker - Detects forensic tools, hooks mem read/write and retuns random data to reads of selected mem regions
3. ADD (Attention Deficit Disorder) - Create fake objects in memory indicating network connections
@30:17 some stats on malware AF
4. https://github.com/rapid7/vaccination (inserts markers into a system to trick vm-aware malware it's running in a vm)
Methods:
 - Debug Detection based on timing execution, assumed slower when debugging
 - Detect VMs, Remote desktop (SCARD_E_INVALID result differs)
 - Detect "Live" user (indicative of a user), might use GetAsyncKeyState
 - Detect list of forensic/rev.enigeering tools running
 - Packing, confuses dissasembly

Video Source: Forensic Fails - Shift + Delete won't help you here
https://www.youtube.com/watch?v=Lf2ymfqD2yY
Techniques used to discover the 'failers'
 - Windows Link files
 - BagMRU winKEY (Most-recently-used stuffs)
 - Windows Jump Lists
 - IE History contains more than just a list...


// Lit/Text
Most common anti forensic techniques (ONLY WITH SOURCES)
(2004) The Defiler's Toolkit:
http://answers.google.com/answers/threadview?id=345604

(2005) SMART Anti-Forensics:
http://www.forensicfocus.com/smart-anti-forensics

[PDF](2006) Stach & Liu Defeating Forensic Analysis
https://repo.zenk-security.com/Forensic/CEIC2006-Defeating_Forensic_Analysis.pdf


[PDF](2007) Anti-Forensics: Techniques, Detection and Countermeasures
http://www.dtic.mil/dtic/tr/fulltext/u2/a576161.pdf

[Haven't found actual paper]
Li u and Brown (2006), “Bleeding-Edge Anti-Forensics,” Infosec World Conference & Expo, MIS Training Institute.

(2006) Anti-Forensics Presentation
https://www.youtube.com/watch?v=q9VUbiFdx7w

(2000) Rootkits: How Intruders Hide
http://www.globalsecurity.org/intell/library/news/2000/02/000223-hack1.htm

[PDF] (2005) Hiding Data in Journaling File Systems
http://www.dfrws.org/sites/default/files/session-files/paper-data_hiding_in_journaling_file_systems.pdf

[PDF] (2006) Arriving at an Anti-Forensics Consensus
https://www.dfrws.org/sites/default/files/session-files/paper-arriving_at_an_anti-forensics_consensus_-_examining_how_to_define_and_control_the_anti-forensics_problem.pdf

[PDF] (2013) Booby Trapping Software
http://www.nspw.org/papers/2013/nspw2013-crane.pdf

[PDF] (2012) Triage Template Pipelines in Digital Forensic Investigations
https://www.researchgate.net/publication/259164846_Triage_template_pipelines_in_digital_forensic_investigations

[PDF] (2011) Forenscope: A Framework for Live Forensics
https://www.ideals.illinois.edu/bitstream/handle/2142/24365/Chan_Ellick.pdf
